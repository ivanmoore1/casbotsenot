import logging
import configparser
import time
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.storage import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from Casino import sql as c_sql

settings = configparser.ConfigParser()
settings.read('settings.ini')
storage = MemoryStorage()
bot = Bot(settings['BOT']['Token'], parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=storage)
db_c = c_sql.Database('Casino/db.db')
logging.basicConfig(level=logging.INFO)


class Answers(StatesGroup):
    answer1 = State()
    answer2 = State()
    answer3 = State()


@dp.message_handler(commands=['start'], state='*')
async def start(m: types.Message, state=FSMContext):
    await state.finish()
    user_id = m.from_user.id
    if user_id == int(settings['MAIN']['Admin']):
        return await m.answer('Admin chat set!')
    reg_date = time.strftime('%d/%m/%Y %H:%M:%S')
    login = '0'
    if m.from_user.username is None:
        login = 'None'
    else:
        login = m.from_user.username

    if not db_c.user_exists(user_id):
        db_c.add_user(user_id, login, m.from_user.first_name, m.from_user.last_name, 0, reg_date)

    if db_c.get_group(user_id) >= 1:
        with open('pic.jpg', 'rb') as pic:
            await bot.send_photo(user_id, pic,
                                 '<b>–¢–≤–æ—è –∑–∞—è–≤–∫–∞ —É–∂–µ –æ–¥–æ–±—Ä–µ–Ω–∞‚úÖ\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\nüé∞ –ö–∞–∑–∏–Ω–æ\n‚ï† @end_soft\n‚ïö –ú–µ–Ω—é –≤–æ—Ä–∫–µ—Ä–∞ - –∫–Ω–æ–ø–∫–∞ –≤–Ω–∏–∑—É</b>',
                                 reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                     [InlineKeyboardButton('üí¨ –ß–∞—Ç', url='https://t.me/end_soft')],
                                     [InlineKeyboardButton('üí∏ –í—ã–ø–ª–∞—Ç—ã', url='https://t.me/end_soft')],
                                     [InlineKeyboardButton('üìö –ú–∞–Ω—É–∞–ª—ã', url='https://t.me/end_soft')]
                                 ]))

    with open('pic.jpg', 'rb') as pic:
        await bot.send_photo(user_id, pic, f'<b>üëã –ü—Ä–∏–≤–µ—Ç {m.from_user.first_name}!\n\n'
                                           f'–ß—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω–∞–º–∏ —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É!</b>',
                             reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                 [InlineKeyboardButton('üöÄ –ü–æ–≥–Ω–∞–ª–∏', callback_data='start')]
                             ]))


@dp.callback_query_handler(lambda c: c.data == 'start')
async def rules(c: types.CallbackQuery):
    user_id = c.from_user.id
    await bot.edit_message_caption(user_id, c.message.message_id,
                                   caption='<b>üìù –ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–µ–∫—Ç–∞, –∫ –ø—Ä–æ—á—Ç–µ–Ω–∏—é –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´!\n\n'
                                           'üö´ –ó–ê–ü–†–ï–©–ï–ù–û:</b>\n'
                                           '<code>- –û—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏\n'
                                           '- –í—ã—è—Å–Ω–µ–Ω–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–π\n'
                                           '- –†–µ–∫–ª–∞–º–∞/–ü—Ä–æ–¥–∞–∂–∞ —É—Å–ª—É–≥ –∏ —Ç.–ø. –±–µ–∑ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏\n'
                                           '- –ö–∏–¥–∞—Ç—å –≤–æ—Ä–∫–µ—Ä–æ–≤ –∏–∑ —Å–≤–æ–µ–π —Ç–∏–º—ã</code>\n',
                                   reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                       [InlineKeyboardButton('‚úÖ –Ø –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω', callback_data='accept_rules')]
                                   ]))


@dp.callback_query_handler(lambda c: c.data == 'accept_rules')
async def que1(c: types.CallbackQuery):
    user_id = c.from_user.id
    await bot.delete_message(user_id, c.message.message_id)
    await bot.send_message(user_id, '<b>‚ùî –í–æ–ø—Ä–æ—Å –ø–µ—Ä–≤—ã–π\n\n'
                                    '–ò–º–µ–µ—à—å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã?</b>')
    await Answers.answer1.set()


@dp.message_handler(content_types='text', state=Answers.answer1)
async def answer1(m: types.Message, state=FSMContext):
    user_id = m.from_user.id
    async with state.proxy() as data:
        data['answer1'] = m.text
    await bot.send_message(user_id, '<b>‚úçÔ∏è –ó–∞–ø–∏—Å–∞–ª\n'
                                    '‚ùî –í–æ–ø—Ä–æ—Å –≤—Ç–æ—Ä–æ–π\n\n'
                                    '–í –∫–∞–∫–æ–π —Å—Ñ–µ—Ä–µ —Ä–∞–±–æ—Ç–∞–ª?</b>')
    await Answers.answer2.set()


@dp.message_handler(content_types='text', state=Answers.answer2)
async def answer2(m: types.Message, state=FSMContext):
    user_id = m.from_user.id
    async with state.proxy() as data:
        data['answer2'] = m.text
    await bot.send_message(user_id, '<b>‚úçÔ∏è –ó–∞–ø–∏—Å–∞–ª\n'
                                    '‚ùî –í–æ–ø—Ä–æ—Å —Ç—Ä–µ—Ç–∏–π\n\n'
                                    '–û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª –ø—Ä–æ –Ω–∞—Å?</b>')
    await Answers.answer3.set()


@dp.message_handler(content_types='text', state=Answers.answer3)
async def answer3(m: types.Message, state=FSMContext):
    user_id = m.from_user.id
    async with state.proxy() as data:
        data['answer3'] = m.text
        ans1 = data['answer1']
        ans2 = data['answer2']
        ans3 = data['answer3']
        await bot.send_message(user_id, f'<b>‚úâÔ∏è –¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –≥–æ—Ç–æ–≤–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ!</b>\n\n'
                                        f'<b>–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:</b> {ans1}\n'
                                        f'<b>–í –∫–∞–∫–æ–π —Å—Ñ–µ—Ä–µ —Ä–∞–±–æ—Ç–∞–ª:</b> {ans2}\n'
                                        f'<b>–û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª:</b> {ans3}',
                               reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                   [InlineKeyboardButton('‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å', callback_data=f'send={ans1}|{ans2}|{ans3}')],
                                   [InlineKeyboardButton('‚úçÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å', callback_data='edit')]
                               ]))
        await state.finish()


@dp.callback_query_handler(lambda c: c.data == 'edit')
async def edit(c: types.CallbackQuery):
    await que1(c)


@dp.callback_query_handler(lambda c: c.data.startswith('send'))
async def send(c: types.CallbackQuery):
    user_id = c.from_user.id
    answers = c.data.replace('send=', '').split('|')
    await bot.edit_message_text('<b>‚úÖ –¢–≤–æ—è –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –∂–¥—ë—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏!</b>', user_id,
                                c.message.message_id)
    await bot.send_message(settings["MAIN"]["Admin"],
                           f'üî• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç - <a href="tg://user?id={user_id}">{c.from_user.first_name} {c.from_user.last_name}</a>\n\n'
                           f'‚ï† –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {answers[0]}\n'
                           f'‚ï† –í –∫–∞–∫–æ–π —Å—Ñ–µ—Ä–µ —Ä–∞–±–æ—Ç–∞–ª: {answers[1]}\n'
                           f'‚ïö –û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª: {answers[2]}', reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton('–ü—Ä–∏–Ω—è—Ç—å', callback_data=f'accept_form={user_id}')],
            [InlineKeyboardButton('–û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data=f'decline={user_id}')]
        ]))


@dp.callback_query_handler(lambda c: c.data.startswith('accept_form'))
async def accept_form(c: types.CallbackQuery):
    user_id = c.data.replace('accept_form=', '')
    await bot.delete_message(c.from_user.id, c.message.message_id)
    db_c.set_group(user_id, 1)
    with open('pic.jpg', 'rb') as pic:
        await bot.send_photo(user_id, pic,
                             '<b>–¢–≤–æ—è –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞‚úÖ\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\nüé∞ –ö–∞–∑–∏–Ω–æ\n‚ï† @end_soft\n‚ïö –ú–µ–Ω—é –≤–æ—Ä–∫–µ—Ä–∞ - –∫–Ω–æ–ø–∫–∞ –≤–Ω–∏–∑—É</b>',
                             reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                 [InlineKeyboardButton('üí¨ –ß–∞—Ç', url='https://t.me/end_soft')],
                                 [InlineKeyboardButton('üí∏ –í—ã–ø–ª–∞—Ç—ã', url='https://t.me/end_soft')],
                                 [InlineKeyboardButton('üìö –ú–∞–Ω—É–∞–ª—ã', url='https://t.me/end_soft')]
                             ]))


@dp.callback_query_handler(lambda c: c.data.startswith('decline'))
async def decline_form(c: types.CallbackQuery):
    user_id = c.data.replace('decline=', '')
    await bot.delete_message(c.from_user.id, c.message.message_id)
    await bot.send_message(user_id, '<b>–¢–≤–æ—è –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞‚ùå\n\n–í–æ–∑–º–æ–∂–Ω–æ —Ç—ã –Ω–∞—Ä—É—à–∏–ª –ø—Ä–∞–≤–∏–ª–∞ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏.</b>', )


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
