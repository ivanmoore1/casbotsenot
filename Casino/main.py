# -*- coding: utf-8 -*-
import logging
import states
import time
import more_less
from datetime import datetime
from converter import conveyor, conveyor2
from AntiSpam import test
from loader import bot, dp, db, admin, payments, tech_support
from func import profile, get_key
from aiogram import types, executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext

logging.basicConfig(level=logging.INFO)


# ******************_START_******************
@dp.message_handler(commands=['start'])
async def start(m: types.Message):
    user_id = m.from_user.id
    if db.user_exists(user_id) is False:
        who_invite = m.text
        if len(who_invite) != 6:
            try:
                ref = int(who_invite[7:])
                boss = ref
                if db.get_group(ref) > 0:
                    await bot.send_message(ref,
                                           f'üêòÔ∏è <b>–£ —Ç–µ–±—è –Ω–æ–≤—ã–π –º–∞–º–æ–Ω—Ç - <a href="tg://user?id={user_id}">{m.from_user.first_name}</a></b>\n')
            except:
                boss = 0
        else:
            boss = 0
        reg_date = time.strftime('%d/%m/%Y %H:%M:%S')
        login = '0'
        if m.from_user.username is None:
            login = 'None'
        else:
            login = m.from_user.username
        db.add_user(user_id, login, m.from_user.first_name, m.from_user.last_name, boss, reg_date)
        await bot.send_message(user_id, '<b>üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ (Choose language):</b>',
                               reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                   [InlineKeyboardButton('üá∑üá∫ –†—É—Å—Å–∫–∏–π', callback_data=f'lang=^{user_id}^ru'),
                                    InlineKeyboardButton('üá¨üáß English', callback_data=f'lang=^{user_id}^eng')]
                               ]))
    else:
        if db.get_lang(user_id) == '0':
            await bot.send_message(user_id, '<b>üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ (Choose language):</b>',
                                   reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                       [InlineKeyboardButton('üá∑üá∫ –†—É—Å—Å–∫–∏–π', callback_data=f'lang=^{user_id}^ru'),
                                        InlineKeyboardButton('üá¨üáß English', callback_data=f'lang=^{user_id}^eng')]
                                   ]))
        elif db.get_lang(user_id) == 'ru':
            await bot.send_message(user_id, '<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>', reply_markup=await get_key(user_id))
            await profile(user_id)
        elif db.get_lang(user_id) == 'eng':
            await bot.send_message(user_id, '<b>Welcome!</b>', reply_markup=await get_key(user_id))
            await profile(user_id)


@dp.callback_query_handler(lambda call: call.data.startswith('lang='))
async def lang(c: types.CallbackQuery):
    user_id = c.from_user.id
    new_lang = c.data.replace('lang=', '').split('^')
    if new_lang[2] == 'ru':
        db.set_lang(user_id, 'ru')
    else:
        db.set_lang(user_id, 'eng')
    if db.get_lang(user_id) == 'ru':
        await bot.edit_message_text(chat_id=user_id, message_id=c.message.message_id,
                                    text=f'<b>üéâ –ü—Ä–∏–≤–µ—Ç, {c.from_user.first_name}!</b>\n\n'
                                         f'<b>–ü–æ–ª–∏—Ç–∏–∫–∞ –∏ —É—Å–ª–æ–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã–º –±–æ—Ç–æ–º:</b>\n'
                                         f'<i>1. –ò–≥—Ä–∞—è —É –Ω–∞—Å, –≤—ã –±–µ—Ä—ë—Ç–µ –≤—Å–µ —Ä–∏—Å–∫–∏ –∑–∞ —Å–≤–æ–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ —Å–µ–±—è.</i>\n'
                                         f'<i>2. –ü—Ä–∏–Ω–∏–º–∞—è –ø—Ä–∞–≤–∏–ª–∞, –í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–≤–æ—ë —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏–µ!</i>\n'
                                         f'<i>3. –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–±–∞–Ω–µ–Ω –≤ –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–∏ –Ω–∞ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ/–æ–±–º–∞–Ω –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã!</i>\n'
                                         f'<i>4. –ú—É–ª—å—Ç–∏–∞–∫–∫–∞—É–Ω—Ç—ã –∑–∞–ø—Ä–µ—â–µ–Ω—ã!</i>\n'
                                         f'<i>5. –°–∫—Ä–∏–ø—Ç—ã, —Å—Ö–µ–º—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ!</i>\n'
                                         f'<i>6. –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤, —Å—É–º–º–∞ –≤–∞—à–µ–≥–æ –≤—ã–∏–≥—Ä—ã—à–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ 5 —Ä–∞–∑ –±–æ–ª—å—à–µ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è!\n</i>'
                                         f'<i>7. –ï—Å–ª–∏ –±—É–¥—É—Ç –≤—ã—è–≤–ª–µ–Ω—ã –≤—ã—à–µ–ø–µ—Ä—á–∏—Å–ª–µ–Ω–Ω—ã–µ —Å–ª—É—á–∞–∏, –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—É–¥–µ—Ç –∑–∞–º–æ—Ä–æ–∂–µ–Ω –¥–æ –≤—ã—è—Å–Ω–µ–Ω–∏—è –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤!\n</i>'
                                         f'–í–∞—à–∞ –∑–∞–¥–∞—á–∞ - —É–≥–∞–¥–∞—Ç—å, –≤ –∫–∞–∫–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –±—É–¥–µ—Ç —Ä–∞—Å–ø–æ–ª–∞–≥–∞—Ç—å—Å—è –≤—ã–ø–∞–¥—à–µ–µ —á–∏—Å–ª–æ.\n'
                                         f'–û—Ç 0 –¥–æ 50, –ª–∏–±–æ –æ—Ç 50 –¥–æ 100, –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —É–¥–≤–æ–µ–Ω–∏–µ —Å—É–º–º—ã —Å—Ç–∞–≤–∫–∏, –ª–∏–±–æ –∂–µ –µ—Å–ª–∏ –í–∞—à–µ —á–∏—Å–ª–æ –±—É–¥–µ—Ç —Ä–∞–≤–Ω–æ 50, —Ç–æ —Ç–æ–≥–¥–∞ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –≤—ã–∏–≥—Ä—ã—à —Ä–∞–≤–Ω—ã–π 5 –í–∞—à–∏–º —Å—Ç–∞–≤–∫–∞–º. –ù–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–ø–∞–¥–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞ –Ω–∞–º–Ω–æ–≥–æ –Ω–∏–∂–µ.\n',
                                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                        [InlineKeyboardButton('‚úÖ –ü—Ä–∏–Ω—è—Ç—å', callback_data='accept')]
                                    ]))
    elif db.get_lang(user_id) == 'eng':
        await bot.edit_message_text(chat_id=user_id, message_id=c.message.message_id,
                                    text=f'<b>üéâ Hi, {c.from_user.first_name}!</b>\n\n'
                                         f'<b>Bot data use policy and terms:</b>\n'
                                         f'<i>1. By playing with us, you take all the risks for your funds.</i>\n'
                                         f'<i>2. By accepting the rules, you confirm that you are of legal age!</i>\n'
                                         f'<i>3. Your account may be banned in suspicion of fraud/cheating our system!</i>\n'
                                         f'<i>4. Multi-accounts are prohibited!</i>\n'
                                         f'<i>5. Scripts, schemes are prohibited!</i>\n'
                                         f'<i>6. To process the withdrawal of funds, the amount of your winnings must be 5 times the amount of replenishment!\n</i>'
                                         f'<i>7. If the above cases are detected, your account will be frozen until the circumstances are clarified!\n</i>'
                                         f'<i>8. If necessary, the administration has the right to ask you for documents confirming your identity and your age.\n\n</i>'
                                         f'Your task is to guess in which range the dropped number will be located\n'
                                         f'From 0 to 50, or from 50 to 100, in which case you get a doubling of the bet amount, or if your number is equal to 50, then you get a win equal to 5 of your bets. But the probability of getting this number is much lower.\n',
                                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                        [InlineKeyboardButton('‚úÖ Accept', callback_data='accept')]
                                    ]))


@dp.callback_query_handler(lambda call: call.data == 'accept')
async def accept(c: types.CallbackQuery):
    user_id = c.from_user.id
    await bot.delete_message(chat_id=user_id, message_id=c.message.message_id)
    if db.get_lang(user_id) == 'ru':
        await bot.send_message(user_id, '<b>‚ùóÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:</b>',
                               reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                    [InlineKeyboardButton('üá∑üá∫ RUB ‚ÇΩ', callback_data=f'set_currency=^{user_id}^‚ÇΩ'),
                                    InlineKeyboardButton('üá∫üá¶ UAH ‚Ç¥', callback_data=f'set_currency=^{user_id}^‚Ç¥'),
                                    InlineKeyboardButton('üá™üá∫ EUR ‚Ç¨', callback_data=f'set_currency=^{user_id}^‚Ç¨')]
                               ]))
    elif db.get_lang(user_id) == 'eng':
        await bot.send_message(user_id, '<b>‚ùóÔ∏è Select currency:</b>',
                               reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                    [InlineKeyboardButton('üá∑üá∫ RUB ‚ÇΩ', callback_data=f'set_currency=^{user_id}^‚ÇΩ'),
                                    InlineKeyboardButton('üá∫üá¶ UAH ‚Ç¥', callback_data=f'set_currency=^{user_id}^‚Ç¥'),
                                    InlineKeyboardButton('üá™üá∫ EUR ‚Ç¨', callback_data=f'set_currency=^{user_id}^‚Ç¨')]
                               ]))


@dp.callback_query_handler(lambda call: call.data == 'cancel', state='*')
async def cancel(c: types.CallbackQuery, state=FSMContext):
    user_id = c.from_user.id
    await bot.delete_message(chat_id=user_id, message_id=c.message.message_id)
    await state.finish()
    await profile(user_id)


@dp.callback_query_handler(lambda call: call.data == 'cancel_admin', state='*')
async def cancel_admin(c: types.CallbackQuery, state=FSMContext):
    user_id = c.from_user.id
    await bot.delete_message(chat_id=user_id, message_id=c.message.message_id)
    await state.finish()
    await bot.send_message(user_id, f'<b>üíéÔ∏è –ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—å</b>\n\n'
                                    f'<b>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ -</b> {len(db.get_all())}\n'
                                    f'<b>ü§ë –í–æ—Ä–∫–µ—Ä–æ–≤ -</b> {len(db.get_workers())}',
                           reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                               [InlineKeyboardButton('üîé –ù–∞–π—Ç–∏ –º–∞–º–æ–Ω—Ç–∞', switch_inline_query_current_chat='u=')],
                               [InlineKeyboardButton('‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞', callback_data='post')],
                               [InlineKeyboardButton('üí≥ –ö–∞—Ä—Ç—ã', callback_data='cards')]
                           ]))


@dp.callback_query_handler(lambda call: call.data == 'change_cur')
async def change_cur(c: types.CallbackQuery):
    user_id = c.from_user.id
    if db.get_lang(user_id) == 'ru':
        await bot.edit_message_text(chat_id=user_id, message_id=c.message.message_id,
                                    text='<b>üëâ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:</b>',
                                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                        [InlineKeyboardButton('üá∑üá∫ RUB ‚ÇΩ',
                                                              callback_data=f'set_currency=^{user_id}^‚ÇΩ'),
                                        InlineKeyboardButton('üá∫üá¶ UAH ‚Ç¥',
                                                              callback_data=f'set_currency=^{user_id}^‚Ç¥'),
                                        InlineKeyboardButton('üá™üá∫ EUR ‚Ç¨',
                                                              callback_data=f'set_currency=^{user_id}^‚Ç¨')]
                                    ]))
    elif db.get_lang(user_id) == 'eng':
        await bot.edit_message_text(chat_id=user_id, message_id=c.message.message_id, text='<b>‚ùóÔ∏è Select currency:</b>',
                                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                        [InlineKeyboardButton('üá∫üá¶ UAH ‚Ç¥',
                                                              callback_data=f'set_currency=^{user_id}^‚Ç¥'),
                                        InlineKeyboardButton('üá™üá∫ EUR ‚Ç¨', callback_data=f'set_currency=^{user_id}^‚Ç¨')]
                                    ]))
    else:
        await bot.edit_message_text(chat_id=user_id, message_id=c.message.message_id, text='<b>‚ùóÔ∏è Select currency:</b>',
                                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                        [InlineKeyboardButton('üá∫üá¶ UAH ‚Ç¥',
                                                              callback_data=f'set_currency=^{user_id}^‚Ç¥'),
                                        InlineKeyboardButton('üá™üá∫ EUR ‚Ç¨', callback_data=f'set_currency=^{user_id}^‚Ç¨')]
                                    ]))


@dp.callback_query_handler(lambda call: call.data == 'change_lang')
async def change_cur(c: types.CallbackQuery):
    user_id = c.from_user.id
    if db.get_lang(user_id) == 'eng':
        await bot.edit_message_text(chat_id=user_id, message_id=c.message.message_id, text='<b>üåê Choose language:</b>',
                                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                        [InlineKeyboardButton('üá∑üá∫ –†—É—Å—Å–∫–∏–π', callback_data='set_lang=ru'),
                                         InlineKeyboardButton('üá¨üáß English', callback_data='set_lang=eng')]
                                    ]))
    elif db.get_lang(user_id) == 'ru':
        await bot.edit_message_text(chat_id=user_id, message_id=c.message.message_id, text='<b>üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:</b>',
                                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                        [InlineKeyboardButton('üá∑üá∫ –†—É—Å—Å–∫–∏–π', callback_data='set_lang=ru'),
                                         InlineKeyboardButton('üá¨üáß English', callback_data='set_lang=eng')]
                                    ]))


@dp.callback_query_handler(lambda call: call.data.startswith('set_lang='))
async def set_lang(c: types.CallbackQuery):
    user_id = c.from_user.id
    new_lang = c.data.replace('set_lang=', '').split('^')
    db.set_lang(user_id, new_lang[0])
    await bot.delete_message(chat_id=user_id, message_id=c.message.message_id)
    if db.get_lang(user_id) == 'ru':
        await bot.send_message(user_id, '<b>‚úÖ –Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!</b>', reply_markup=await get_key(user_id))

    elif db.get_lang(user_id) == 'eng':
        await bot.send_message(user_id, '<b>‚úÖ Language set!</b>', reply_markup=await get_key(user_id))
    await profile(user_id)


@dp.callback_query_handler(lambda call: call.data == 'top_up')
async def top_up(c: types.CallbackQuery):
    user_id = c.from_user.id
    if db.get_lang(user_id) == 'ru':
        await bot.edit_message_caption(chat_id=user_id, message_id=c.message.message_id,
                                       caption=f'<b>‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b>\n'
                                               f'<i>‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è {db.get_min(user_id)}{db.get_currency(user_id)}</i>',
                                       reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                           [InlineKeyboardButton('‚óÄÔ∏è –û—Ç–º–µ–Ω–∞', callback_data='cancel')]
                                       ]))
        await states.TopUp.value.set()

    elif db.get_lang(user_id) == 'eng':
        await bot.edit_message_caption(chat_id=user_id, message_id=c.message.message_id,
                                       caption=f'<b>‚úçÔ∏è Enter replenishment amount:</b>\n'
                                               f'<i>‚ö†Ô∏è Minimum deposit amount {db.get_min(user_id)}{db.get_currency(user_id)}</i>',
                                       reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                           [InlineKeyboardButton('‚óÄÔ∏è Cancel', callback_data='cancel')]
                                       ]))
        await states.TopUp.value.set()


@dp.message_handler(content_types='text', state=states.TopUp.value)
async def top_up2(m: types.Message, state=FSMContext):
    user_id = m.from_user.id
    async with state.proxy() as data:
        data['answer'] = m.text
        answers = data['answer']
        if answers.isdigit() and int(answers) != 0 and int(answers) >= db.get_min(user_id):
            topup_card = 0
            if db.get_currency(user_id) == '‚ÇΩ':
                topup_card = db.get_card('RUB')
            elif db.get_currency(user_id) == '‚Ç¥':
                topup_card = db.get_card('UAH')
            elif db.get_currency(user_id) == '‚Ç¨':
                topup_card = db.get_card('EUR')

            if db.get_lang(user_id) == 'ru':
                with open('img/popolnenieRU.png', 'rb') as pic:
                    await bot.send_photo(user_id, pic, f'<b>üì• –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>\n\n'
                                                       f'<b>üí∞ –°—É–º–º–∞:</b> {answers}{db.get_currency(user_id)}\n\n'
                                                       f'<b>üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã:</b>\n'
                                                       f'<code>{topup_card}</code>\n\n'
                                                       f'<b>üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b>\n'
                                                       f'<code>DRAGON-MONEY:{m.from_user.id}</code>\n\n'
                                                       f'<i>‚ö†Ô∏è–ï—Å–ª–∏ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫/—Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫—É.</i>\n'
                                                       f'<i>–°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 5 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞.</i>',
                                         reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                             [InlineKeyboardButton('üßë‚Äçüíª –¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞', url=f't.me/{tech_support}')]
                                         ]))
            elif db.get_lang(user_id) == 'eng':
                with open('img/popolnenieEU.png', 'rb') as pic:
                    await bot.send_photo(user_id, pic, f'<b>üì• Balance replenishment</b>\n\n'
                                                       f'<b>üí∞ Sum:</b> {answers}{db.get_currency(user_id)}\n\n'
                                                       f'<b>üí≥ Requisites:</b>\n'
                                                       f'<code>{topup_card}</code>\n\n'
                                                       f'<b>üí¨ Comment:</b>\n'
                                                       f'<code>DRAGON-MONEY:{m.from_user.id}</code>\n\n'
                                                       f'<i>‚ö† Ô∏èIf you are unable to provide a comment, please send a check/screenshot of the translation to Tech. Support.</i>\n'
                                                       f'<i>Funds are credited automatically within 5 minutes after the transfer.</i>',
                                         reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                             [InlineKeyboardButton('üßë‚Äçüíª Tech. Support', url=f't.me/{tech_support}')]
                                         ]))

            try:
                ref_id = db.get_id(db.get_ref(user_id))
                ref_name = db.get_name(ref_id)
            except:
                ref_id = 0
                ref_name = '-'

            await bot.send_message(admin,
                                   f'<b>üí≥ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç</b> <a href="tg://user?id={user_id}">{m.from_user.first_name}</a>\n\n'
                                   f'<b>ü§ù –†–µ—Ñ–µ—Ä–∞–ª:</b> <a href="tg://user?id={ref_id}">{ref_name}</a>\n'
                                   f'<b>üí∞ –°—É–º–º–∞:</b> {answers}{db.get_currency(user_id)}',
                                   reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                       [InlineKeyboardButton('üî∏ 85%',
                                                             callback_data=f'payday={answers}^{db.get_currency(user_id)}^{ref_id}^85%'),
                                        InlineKeyboardButton('üî∏ 80%',
                                                             callback_data=f'payday={answers}^{db.get_currency(user_id)}^{ref_id}^80%')],
                                       [InlineKeyboardButton('üî∏ 75%',
                                                             callback_data=f'payday={answers}^{db.get_currency(user_id)}^{ref_id}^75%'),
                                        InlineKeyboardButton('üî∏ 70%',
                                                             callback_data=f'payday={answers}^{db.get_currency(user_id)}^{ref_id}^70%')],
                                        [InlineKeyboardButton('üî∏ 65%',
                                                             callback_data=f'payday={answers}^{db.get_currency(user_id)}^{ref_id}^65%')],
                                       [InlineKeyboardButton('‚ùå –ó–∞–∫—Ä—ã—Ç—å', callback_data='cancel')]
                                   ]))

            if db.get_ref(user_id) == 0 or db.get_group(db.get_ref(user_id)) == 0:
                await state.finish()
            else:
                await bot.send_message(db.get_ref(user_id),
                                       f'<b>üí≥ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç</b> <a href="tg://user?id={user_id}">{m.from_user.first_name}</a>\n\n'
                                       f'<b>üí∞ –°—É–º–º–∞:</b> {answers}{db.get_currency(user_id)}\n\n'
                                       f'<b>‚ö°Ô∏è –ó–∞—Ä—è–¥ –Ω–∞ –∑–∞–ª—ë—Ç</b>', reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton('üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å', callback_data=f'accept_top_up=^{user_id}^{answers}')]
                    ]))
                await state.finish()
        else:
            if db.get_lang(user_id) == 'ru':
                await bot.send_message(user_id, '<b>‚ùóÔ∏è –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!</b>',
                                       reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                           [InlineKeyboardButton('üîô –û—Ç–º–µ–Ω–∞', callback_data='cancel')]
                                       ]))
            elif db.get_lang(user_id) == 'eng':
                await bot.send_message(user_id, '<b>‚ùóÔ∏è Amount must be an integer, please try again!</b>',
                                       reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                           [InlineKeyboardButton('üîô Cancel', callback_data='cancel')]
                                       ]))


@dp.callback_query_handler(lambda call: call.data.startswith('accept_top_up='))
async def accept_top_up(c: types.CallbackQuery):
    user_id = c.from_user.id
    value = c.data.replace('accept_top_up=', '').split('^')
    try:
        db.set_balance(value[1], round(db.get_balance(value[1]) + int(value[2])))
        await bot.edit_message_text(chat_id=user_id, message_id=c.message.message_id,
                                    text=f'<b>‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω -</b> <a href="tg://user?id={value[1]}">{db.get_name(value[1])}</a>\n'
                                         f'<b>üí∞ –ù–∞ —Å—É–º–º—É:</b> {value[2]}{db.get_currency(value[1])}',
                                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                        [InlineKeyboardButton(f'‚óÄÔ∏è –í –º–µ–Ω—é –º–∞–º–æ–Ω—Ç–∞ {db.get_name(value[1])}',
                                                              callback_data=f'i={value[1]}')]
                                    ]))
        if db.get_lang(value[1]) == 'ru':
            await bot.send_message(value[1], f'<b>üì• –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {value[2]}{db.get_currency(value[1])}!</b>')
        elif db.get_lang(value[1]) == 'eng':
            await bot.send_message(value[1],
                                   f'<b>üì• Your balance has been replenished with {value[2]}{db.get_currency(value[1])}!</b>')
    except:
        await c.answer(text='‚ùå –û—à–∏–±–∫–∞')


@dp.callback_query_handler(lambda call: call.data.startswith('payday='))
async def payday(c: types.CallbackQuery):
    profit = c.data.replace('payday=', '').split('^')
    print(profit)
    try:
        ref = db.get_username(profit[2])
    except:
        ref = 'none'


    if profit[3] == '85%':
        money = float(profit[0]) * 0.85
        await bot.send_message(payments, f'<b>üíû –ù–û–í–´–ô –ü–†–û–§–ò–¢!  ‚è≥</b>\n'
                                         f'<b>‚ö°Ô∏è –°–µ—Ä–≤–∏—Å:</b> –ö–∞–∑–∏–Ω–æ\n'
                                         f'<b>üí∏ –ó–∞–ª–µ—Ç–µ–ª–æ:</b> {profit[0]}{profit[1]}\n'
                                         f'<b>ü§ù –î–æ–ª—è –≤–æ—Ä–∫–µ—Ä–∞:</b> {money}{profit[1]} [85%]\n'
                                         f'<b>ü•∑ –í–æ—Ä–∫–µ—Ä:</b> <a href="https://t.me/{ref}">{ref}</a>',disable_web_page_preview = True)

    elif profit[3] == '75%':
        money = float(profit[0])* 0.75
        await bot.send_message(payments, f'<b>üíû –ù–û–í–´–ô –ü–†–û–§–ò–¢!  ‚è≥</b>\n'
                                         f'<b>‚ö°Ô∏è –°–µ—Ä–≤–∏—Å:</b> –ö–∞–∑–∏–Ω–æ\n'
                                         f'<b>üí∏ –ó–∞–ª–µ—Ç–µ–ª–æ:</b> {profit[0]}{profit[1]}\n'
                                         f'<b>ü§ù –î–æ–ª—è –≤–æ—Ä–∫–µ—Ä–∞:</b> {money}{profit[1]} [75%]\n'
                                         f'<b>ü•∑ –í–æ—Ä–∫–µ—Ä:</b> <a href="https://t.me/{ref}">{ref}</a>',disable_web_page_preview = True)

    elif profit[3] == '70%':
        money = float(profit[0]) * 0.7
        await bot.send_message(payments, f'<b>üíû –ù–û–í–´–ô –ü–†–û–§–ò–¢!  ‚è≥</b>\n'
                                         f'<b>‚ö°Ô∏è –°–µ—Ä–≤–∏—Å:</b> –ö–∞–∑–∏–Ω–æ\n'
                                         f'<b>üí∏ –ó–∞–ª–µ—Ç–µ–ª–æ:</b> {profit[0]}{profit[1]}\n'
                                         f'<b>ü§ù –î–æ–ª—è –≤–æ—Ä–∫–µ—Ä–∞:</b> {money}{profit[1]} [70%]\n'
                                         f'<b>ü•∑ –í–æ—Ä–∫–µ—Ä:</b> <a href="https://t.me/{ref}">{ref}</a>',disable_web_page_preview = True)

    elif profit[3] == '80%':
        money = float(profit[0]) * 0.8
        await bot.send_message(payments, f'<b>üíû –ù–û–í–´–ô –ü–†–û–§–ò–¢!  ‚è≥</b>\n'
                                         f'<b>‚ö°Ô∏è –°–µ—Ä–≤–∏—Å:</b> –ö–∞–∑–∏–Ω–æ\n'
                                         f'<b>üí∏ –ó–∞–ª–µ—Ç–µ–ª–æ:</b> {profit[0]}{profit[1]}\n'
                                         f'<b>ü§ù –î–æ–ª—è –≤–æ—Ä–∫–µ—Ä–∞:</b> {money}{profit[1]} [80%]\n'
                                         f'<b>ü•∑ –í–æ—Ä–∫–µ—Ä:</b> <a href="https://t.me/{ref}">{ref}</a>',disable_web_page_preview = True)
    elif profit[3] == '65%':
        money = float(profit[0]) * 0.65
        await bot.send_message(payments, f'<b>üíû –ù–û–í–´–ô –ü–†–û–§–ò–¢!  ‚è≥</b>\n'
                                         f'<b>‚ö°Ô∏è –°–µ—Ä–≤–∏—Å:</b> –ö–∞–∑–∏–Ω–æ\n'
                                         f'<b>üí∏ –ó–∞–ª–µ—Ç–µ–ª–æ:</b> {profit[0]}{profit[1]}\n'
                                         f'<b>ü§ù –î–æ–ª—è –≤–æ—Ä–∫–µ—Ä–∞:</b> {money}{profit[1]} [65%]\n'
                                         f'<b>ü•∑ –í–æ—Ä–∫–µ—Ä:</b> <a href="https://t.me/{ref}">{ref}</a>',disable_web_page_preview = True)

    if ref == 0:
        return
    current = '0'
    if profit[1] == '‚Ç¥':
        current = 'UAH'
    elif profit[1] == '‚Ç¨':
        current = 'EUR'
    elif profit[1] == '‚ÇΩ':
        current = 'RUB'
    value = conveyor2(float(profit[0]), current, 'RUB')
    db.set_profit(profit[2], round(db.get_profit(profit[2]) + value))


@dp.callback_query_handler(lambda call: call.data == 'withdraw')
async def withdraw(c: types.CallbackQuery):
    user_id = c.from_user.id
    if db.get_status(user_id) == 3:
        if db.get_lang(user_id) == 'ru':
            return await bot.send_message(user_id, '<b>üö´ –ù–∞ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤–≤–µ–¥–µ–Ω—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è!</b>\n\n'
                                                   '<b>‚ùóÔ∏è –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —Å–Ω—è—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é!</b>')
        elif db.get_lang(user_id) == 'eng':
            return await bot.send_message(user_id, '<b>üö´ Your account has been restricted!</b>\n\n'
                                                   '<b>‚ùóÔ∏è In order to remove restrictions, you need to pass verification!</b>')
    if db.get_lang(user_id) == 'ru':
        await bot.edit_message_caption(chat_id=user_id, message_id=c.message.message_id,
                                       caption=f'<b>üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å:</b> {db.get_balance(user_id)}{db.get_currency(user_id)}\n'
                                               f'<b>‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞:</b>',
                                       reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                           [InlineKeyboardButton('‚óÄÔ∏è –û—Ç–º–µ–Ω–∞', callback_data='cancel')]
                                       ]))
        await states.Withdraw.value.set()
    elif db.get_lang(user_id) == 'eng':
        await bot.edit_message_caption(chat_id=user_id, message_id=c.message.message_id,
                                       caption=f'<b>üí∞ Your balance:</b> {db.get_balance(user_id)}{db.get_currency(user_id)}\n'
                                               f'<b>‚úçÔ∏è Enter withdrawal amount:</b>',
                                       reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                           [InlineKeyboardButton('‚óÄÔ∏è Cancel', callback_data='cancel')]
                                       ]))
        await states.Withdraw.value.set()


@dp.message_handler(content_types='text', state=states.Withdraw.value)
async def withdraw2(m: types.Message, state=FSMContext):
    user_id = m.from_user.id
    async with state.proxy() as data:
        data['answer'] = m.text
        answers = data['answer']
        if answers.isdigit() and int(answers) != 0 and db.get_balance(user_id) >= int(answers):
            if db.get_lang(user_id) == 'ru':
                await bot.send_message(user_id, f'<b>–í—ã–≤–æ–¥ –Ω–∞ –±–∞–Ω–∫–æ–≤—Å–≤–∫—É—é –∫–∞—Ä—Ç—É</b>\n\n'
                                                f'<i>‚ö†Ô∏è –í—ã–≤–æ–¥ –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, —Å –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ø–æ–ª–Ω—è–ª—Å—è –í–∞—à –±–∞–ª–∞–Ω—Å –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑!</i>\n\n'
                                                f'<b>‚ùóÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å?</b>',
                                       reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                           [InlineKeyboardButton('–î–∞',
                                                                 callback_data=f'accept_withdraw={answers}'),
                                            InlineKeyboardButton('–ù–µ—Ç', callback_data='cancel')]
                                       ]))
                await state.finish()
            elif db.get_lang(user_id) == 'eng':
                await bot.send_message(user_id, f'<b>Withdrawal to a bank card</b>\n\n'
                                                f'<i>‚ö†Ô∏è Withdrawal is possible only to the details from which your balance was replenished last time!</i>\n\n'
                                                f'<b>‚ùóÔ∏è Confirm?</b>',
                                       reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                           [InlineKeyboardButton('Yes',
                                                                 callback_data=f'accept_withdraw={answers}'),
                                            InlineKeyboardButton('No', callback_data='cancel')]
                                       ]))
                await state.finish()
        else:
            if db.get_lang(user_id) == 'ru':
                await bot.send_message(user_id, '<b>‚ùóÔ∏è –ù–∞ –í–∞—à–µ–º —Å—á—ë—Ç—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!</b>',
                                       reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                           [InlineKeyboardButton('‚óÄÔ∏è –û—Ç–º–µ–Ω–∞', callback_data='cancel')]
                                       ]))
            elif db.get_lang(user_id) == 'eng':
                await bot.send_message(user_id,
                                       '<b>‚ùóÔ∏è There are not enough funds on your account, please try again!</b>',
                                       reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                           [InlineKeyboardButton('‚óÄÔ∏è Cancel', callback_data='cancel')]
                                       ]))


@dp.callback_query_handler(lambda call: call.data.startswith('accept_withdraw='))
async def withdraw3(c: types.CallbackQuery):
    user_id = c.from_user.id
    item = c.data.replace('accept_withdraw=', '')
    db.set_balance(user_id, round(db.get_balance(user_id) - int(item)))
    await bot.delete_message(chat_id=user_id, message_id=c.message.message_id)
    if db.get_lang(user_id) == 'ru':
        await bot.send_message(user_id, '<b>‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n‚åõÔ∏è –û–∂–∏–¥–∞–π—Ç–µ...</b>')
    elif db.get_lang(user_id) == 'eng':
        await bot.send_message(user_id, '<b>‚úÖ Withdrawal request successfully created!\n\n‚åõÔ∏è Expect...</b>')
    if db.get_ref(user_id) == 0:
        return await bot.send_message(admin,
                                      f'<b>üêò –ú–∞–º–æ–Ω—Ç <a href="tg://user?id={user_id}">{db.get_name(user_id)}</a> —Å–æ–∑–¥–∞–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥!</b>\n\n'
                                      f'<b>üí∞ –°—É–º–º–∞ –≤—ã–≤–æ–¥–∞:</b> {item}{db.get_currency(user_id)}',
                                      reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                          [InlineKeyboardButton('‚úÖ –í—ã–≤–µ—Å—Ç–∏',
                                                                callback_data=f'accept_withdraw2=^{user_id}^{item}'),
                                           InlineKeyboardButton('‚ùå –û—Ç–∫–∞–∑',
                                                                callback_data=f'decline_withdraw=^{user_id}^{item}')]
                                      ]))
    if db.get_group(db.get_ref(user_id)) > 0:
        await bot.send_message(db.get_ref(user_id),
                               f'<b>üêò –ú–∞–º–æ–Ω—Ç <a href="tg://user?id={user_id}">{db.get_name(user_id)}</a> —Å–æ–∑–¥–∞–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥!</b>\n\n'
                               f'<b>üí∞ –°—É–º–º–∞ –≤—ã–≤–æ–¥–∞:</b> {item}{db.get_currency(user_id)}',
                               reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                   [InlineKeyboardButton('‚úÖ –í—ã–≤–µ—Å—Ç–∏',
                                                         callback_data=f'accept_withdraw2=^{user_id}^{item}'),
                                    InlineKeyboardButton('‚ùå –û—Ç–∫–∞–∑',
                                                         callback_data=f'decline_withdraw=^{user_id}^{item}')]
                               ]))


@dp.callback_query_handler(lambda call: call.data.startswith('accept_withdraw2='))
async def accept_withdraw(c: types.CallbackQuery):
    user_id = c.from_user.id
    item = c.data.replace('accept_withdraw2=', '').split('^')
    await bot.edit_message_text(chat_id=user_id, message_id=c.message.message_id,
                                text=f'<b>üêò –ú–∞–º–æ–Ω—Ç <a href="tg://user?id={item[1]}">{db.get_name(item[1])}</a> —Å–æ–∑–¥–∞–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥!</b>\n\n'
                                     f'<b>üí∞ –°—É–º–º–∞ –≤—ã–≤–æ–¥–∞:</b> {item[2]}{db.get_currency(item[1])}\n'
                                     f'<b>‚ûñ –í—ã–≤–µ–¥–µ–Ω–æ ‚ûñ</b>')
    if db.get_lang(item[1]) == 'ru':
        await bot.send_message(item[1],
                               '<b>‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ–¥–æ–±—Ä–µ–Ω–∞!\n\n–°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ –í–∞—à —Å—á—ë—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ 15 –º–∏–Ω—É—Ç.</b>')
    elif db.get_lang(item[1]) == 'eng':
        await bot.send_message(item[1],
                               '<b>‚úÖ Withdrawal request approved!\n\nFunds will be credited to your account within 15 minutes.</b>')


@dp.callback_query_handler(lambda call: call.data.startswith('decline_withdraw='))
async def accept_withdraw(c: types.CallbackQuery):
    user_id = c.from_user.id
    item = c.data.replace('accept_withdraw2=', '').split('^')
    db.set_balance(item[1], round(db.get_balance(item[1]) + int(item[2])))
    await bot.edit_message_text(chat_id=user_id, message_id=c.message.message_id,
                                text=f'<b>üêò –ú–∞–º–æ–Ω—Ç <a href="tg://user?id={item[1]}">{db.get_name(item[1])}</a> —Å–æ–∑–¥–∞–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥!</b>\n\n'
                                     f'<b>üí∞ –°—É–º–º–∞ –≤—ã–≤–æ–¥–∞:</b> {item[2]}{db.get_currency(item[1])}\n'
                                     f'<b>‚ûñ –û—Ç–∫–∞–∑–∞–Ω–æ ‚ûñ</b>')
    if db.get_lang(item[1]) == 'ru':
        await bot.send_message(item[1],
                               '<b>‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!\n\n–ü—Ä–æ—Å–∏–º –≤–∞—Å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫—É!</b>',
                               reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                   [InlineKeyboardButton('üßë‚Äçüíª –¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞', url=f't.me/{tech_support}')]
                               ]))
    elif db.get_lang(item[1]) == 'eng':
        await bot.send_message(item[1],
                               '<b>‚ö†Ô∏è Withdrawal request rejected!\n\nPlease contact Tech. Support!</b>',
                               reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                   [InlineKeyboardButton('üßë‚Äçüíª Tech. Support', url=f't.me/{tech_support}')]
                               ]))


@dp.callback_query_handler(lambda call: call.data.startswith('set_currency='))
async def set_currency(c: types.CallbackQuery):
    user_id = c.from_user.id
    element = c.data.replace('set_currency=', '').split('^')
    if element[2] == '‚ÇΩ':
        db.set_min(element[1], 1500)
    elif element[2] == '‚Ç¥':
        db.set_min(element[1], 500)
    elif element[2] == 'Br':
        db.set_min(element[1], 50)
    else:
        db.set_min(element[1], 30)
    conveyor(user_id, element, db.get_balance(user_id))
    await bot.delete_message(chat_id=user_id, message_id=c.message.message_id)
    if db.get_lang(user_id) == 'ru':
        await bot.send_message(user_id, '<b>‚úÖ –í–∞–ª—é—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!</b>', reply_markup=await get_key(user_id))

    elif db.get_lang(user_id) == 'eng':
        await bot.send_message(user_id, '<b>‚úÖ Currency set!</b>', reply_markup=await get_key(user_id))
    await profile(user_id)


@dp.callback_query_handler(lambda call: call.data == 'ref_program')
async def ref_program(c: types.CallbackQuery):
    user_id = c.from_user.id
    bot_me = await bot.get_me()
    if db.get_lang(user_id) == 'ru':
        await bot.edit_message_caption(chat_id=user_id, message_id=c.message.message_id,
                                       caption=f'<b>ü§ù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n\n'
                                               f'<b>üë§ –ó–∞ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ø–æ–ª–Ω–∏—Ç –±–∞–ª–∞–Ω—Å, –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 3% –æ—Ç —Å—É–º–º—ã –µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.</b>\n\n'
                                               f'<b>üîó –í–∞—à–∞ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n'
                                               f'https://t.me/{bot_me.username}?start={user_id}\n\n'
                                               f'<b>üë• –í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ -</b> {len(db.get_refs(user_id))} —á–µ–ª.',
                                       reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                           [InlineKeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='cancel')]
                                       ]))
    elif db.get_lang(user_id) == 'eng':
        await bot.edit_message_caption(chat_id=user_id, message_id=c.message.message_id,
                                       caption=f'<b>ü§ù Affiliate program</b>\n\n'
                                               f'<b>üë§ For each referral who replenishes the balance, you receive 3% of the amount of its replenishment.</b>\n\n'
                                               f'<b>üîó Your invite link:</b>\n'
                                               f'https://t.me/{bot_me.username}?start={user_id}\n\n'
                                               f'<b>üë• You invited -</b> {len(db.get_refs(user_id))} peo.',
                                       reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                           [InlineKeyboardButton('‚óÄÔ∏è Back', callback_data='cancel')]
                                       ]))


@dp.callback_query_handler(lambda call: call.data == 'post')
async def post(c: types.CallbackQuery):
    user_id = c.from_user.id
    await states.Post.text.set()
    await bot.edit_message_text(chat_id=user_id, message_id=c.message.message_id,
                                text='<b>‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b>',
                                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                    [InlineKeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='cancel_admin')]
                                ]))


@dp.message_handler(content_types='text', state=states.Post.text)
async def post2(m: types.Message, state=FSMContext):
    user_id = m.from_user.id
    async with state.proxy() as data:
        data['answers'] = m.text
        global text
        text = data['answers']
        await bot.send_message(user_id, f'<b>‚úâÔ∏è –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?</b>\n\n'
                                        f'<b>–¢–µ–∫—Å—Ç:</b>\n'
                                        f'{text}', reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton('‚úÖ –î–∞', callback_data=f'start_post'),
             InlineKeyboardButton('‚ùå –ù–µ—Ç', callback_data='cancel_admin')]
        ]))
        await state.finish()


@dp.callback_query_handler(lambda call: call.data == 'start_post')
async def start_post(c: types.CallbackQuery):
    user_id = c.from_user.id
    users = db.get_all()
    success = 0
    error = 0
    for user in users:
        try:
            await bot.send_message(user[0], text)
            success += 1
        except:
            error += 1
            pass
    await bot.send_message(user_id, f'<b>‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n'
                                    f'<b>‚úÖ –£—Å–ø–µ—à–Ω–æ:</b> {success}\n'
                                    f'<b>‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ:</b> {error}')


@dp.callback_query_handler(lambda c: c.data.startswith('set_balance='))
async def set_balance(c: types.CallbackQuery):
    user_id = c.from_user.id
    if db.get_group(user_id) < 1:
        return
    global element
    element = c.data.replace('set_balance=', '')
    if db.user_exists(element) is None or (db.get_group(user_id) == 1 and db.get_ref(element) != user_id):
        return
    if c.inline_message_id is not None:
        await states.ChangeBalance.balance.set()
        await bot.edit_message_text(f'<b>‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å –º–∞–º–æ–Ω—Ç–∞:</b>',
                                    inline_message_id=c.inline_message_id,
                                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                        [InlineKeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data=f'i={element}')]
                                    ]))
    else:
        await states.ChangeBalance.balance.set()
        await bot.edit_message_text(f'<b>‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å –º–∞–º–æ–Ω—Ç–∞:</b>',
                                    chat_id=c.message.chat.id,
                                    message_id=c.message.message_id,
                                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                        [InlineKeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data=f'i={element}')]
                                    ]))


@dp.message_handler(content_types='text', state=states.ChangeBalance.balance)
async def set_balance2(m: types.Message, state=FSMContext):
    user_id = m.from_user.id
    async with state.proxy() as data:
        data['answers'] = m.text
        balance = data['answers']
        if not balance.isdigit():
            return await bot.send_message(user_id, '<b>‚ùå –í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!</b>')
        try:
            db.set_balance(element, round(int(balance)))
            await bot.send_message(user_id, '<b>‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å –º–∞–º–æ–Ω—Ç–∞!</b>')
        except:
            await bot.send_message(user_id, '–û—à–∏–±–∫–∞')
            await state.finish()


@dp.callback_query_handler(lambda c: c.data.startswith('set_min_dep='))
async def set_balance(c: types.CallbackQuery):
    user_id = c.from_user.id
    if db.get_group(user_id) < 1:
        return
    global element66
    element66 = c.data.replace('set_min_dep=', '')
    if db.user_exists(element66) is None or (db.get_group(user_id) == 1 and db.get_ref(element66) != user_id):
        return
    if c.inline_message_id is not None:
        await states.ChangeMinDep.dep.set()
        await bot.edit_message_text(f'<b>‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç:</b>',
                                    inline_message_id=c.inline_message_id,
                                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                        [InlineKeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data=f'i={element66}')]
                                    ]))
    else:
        await states.ChangeMinDep.dep.set()
        await bot.edit_message_text(f'<b>‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç:</b>',
                                    chat_id=c.message.chat.id,
                                    message_id=c.message.message_id,
                                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                        [InlineKeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data=f'i={element66}')]
                                    ]))


@dp.message_handler(content_types='text', state=states.ChangeMinDep.dep)
async def set_balance2(m: types.Message, state=FSMContext):
    user_id = m.from_user.id
    async with state.proxy() as data:
        data['answers'] = m.text
        dep = data['answers']
        if not dep.isdigit():
            return await bot.send_message(user_id, '<b>‚ùå –í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!</b>')
        try:
            db.set_min(element66, int(dep))
            await bot.send_message(user_id, '<b>‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –¥–µ–ø–æ–∑–∏—Ç–∞!</b>')
            await state.finish()
        except:
            await bot.send_message(user_id, '–û—à–∏–±–∫–∞')
            await state.finish()


@dp.callback_query_handler(lambda call: call.data.startswith('set_status='))
async def set_status(c: types.CallbackQuery):
    user_id = c.from_user.id
    element3 = c.data.replace('set_status=', '')
    new_status = 0
    if db.get_status(element3) == 0:
        new_status = 1
        db.set_status(element3, new_status)
        await c.answer(text='‚ùï –°—Ç–∞—Ç—É—Å –±—ã–ª –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ "–ü—Ä–æ–∏–≥—Ä—ã—à"')
    elif db.get_status(element3) == 1:
        new_status = 2
        db.set_status(element3, new_status)
        await c.answer(text='‚ùï –°—Ç–∞—Ç—É—Å –±—ã–ª –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ "–†–∞–Ω–¥–æ–º"')
    elif db.get_status(element3) == 2:
        new_status = 3
        db.set_status(element3, new_status)
        await c.answer(text='‚ùï –°—Ç–∞—Ç—É—Å –±—ã–ª –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ "–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è"')
    elif db.get_status(element3) == 3:
        new_status = 0
        db.set_status(element3, new_status)
        await c.answer(text='‚ùï –°—Ç–∞—Ç—É—Å –±—ã–ª –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ "–ü–æ–±–µ–¥–∞"')
    keyboard = [
        [InlineKeyboardButton('‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', callback_data=f'send_message={element3}')],
        [InlineKeyboardButton('üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data=f'set_balance={element3}'),
         InlineKeyboardButton('üîñ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å', callback_data=f'set_status={element3}')],
        [InlineKeyboardButton('üì• –ò–∑–º–µ–Ω–∏—Ç—å –º–∏–Ω. —Å—É–º–º—É –¥–µ–ø–æ–∑–∏—Ç–∞', callback_data=f'set_min_dep={element3}')],
        [InlineKeyboardButton('üîÉ –û–±–Ω–æ–≤–∏—Ç—å', callback_data=f'i={element3}')],
    ]
    group = '–ú–∞–º–æ–Ω—Ç'
    if db.get_group(element3) == 1:
        group = '–í–æ—Ä–∫–µ—Ä'
    elif db.get_group(element3) == 2:
        group = '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'

    status = '–ü–æ–±–µ–¥–∞'
    if db.get_status(element3) == 1:
        status = '–ü—Ä–æ–∏–≥—Ä—ã—à'
    elif db.get_status(element3) == 2:
        status = '–†–∞–Ω–¥–æ–º'
    elif db.get_status(element3) == 3:
        status = '–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è'
    ref = f''
    if db.get_ref(element3) != 0:
        ref_db = db.get_ref(element3)
        if ref_db is not None:
            ref = f'<b>ü§ù –ü—Ä–∏–≥–ª–∞—à—ë–Ω:</b> <a href="tg://user?id={db.get_id(ref_db)}">{db.get_name(ref_db)}</a>'
    if db.get_group(user_id) == 1:
        try:
            if c.inline_message_id is not None:
                await bot.edit_message_text(
                    f'<b>üë§ –ò–º—è:</b> <a href="tg://user?id={db.get_id(element3)}">{db.get_name(element3)}</a>\n'
                    f'<b>üí∞ –ë–∞–ª–∞–Ω—Å:</b> {db.get_balance(element3)}{db.get_currency(element3)}\n'
                    f'<b>üì• –ú–∏–Ω. —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞:</b> {db.get_min(element3)}{db.get_currency(element3)}\n'
                    f'<b>üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> {len(db.get_refs(element3))}\n'
                    f'<b>üîñ –°—Ç–∞—Ç—É—Å:</b> {status}\n',
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
                    inline_message_id=c.inline_message_id)
            else:
                await bot.edit_message_text(
                    f'<b>üë§ –ò–º—è:</b> <a href="tg://user?id={db.get_id(element3)}">{db.get_name(element3)}</a>\n'
                    f'<b>üí∞ –ë–∞–ª–∞–Ω—Å:</b> {db.get_balance(element3)}{db.get_currency(element3)}\n'
                    f'<b>üì• –ú–∏–Ω. —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞:</b> {db.get_min(element3)}{db.get_currency(element3)}\n'
                    f'<b>üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> {len(db.get_refs(element3))}\n'
                    f'<b>üîñ –°—Ç–∞—Ç—É—Å:</b> {status}\n',
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
                    chat_id=c.message.chat.id,
                    message_id=c.message.message_id)
        except Exception as e:
            await c.answer(text='‚ùï –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ')
    elif db.get_group(user_id) == 2:
        keyboard.append(
            [InlineKeyboardButton('üë§ –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É', callback_data=f'set_group={db.get_id(element3)}'),
             InlineKeyboardButton('‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å', callback_data=f'verification={db.get_id(element3)}')])
        try:
            if c.inline_message_id is not None:
                return await bot.edit_message_text(
                    f'<b>üë§ –ò–º—è:</b> <a href="tg://user?id={db.get_id(element3)}">{db.get_name(element3)}</a>\n'
                    f'<b>üîí –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è:</b> {db.get_verif(element3)}\n'
                    f'<b>üí∞ –ë–∞–ª–∞–Ω—Å:</b> {db.get_balance(element3)}{db.get_currency(element3)}\n'
                    f'<b>üì• –ú–∏–Ω. —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞:</b> {db.get_min(element3)}{db.get_currency(element3)}\n'
                    f'<b>üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> {len(db.get_refs(element3))}\n'
                    f'<b>üîñ –°—Ç–∞—Ç—É—Å:</b> {status}\n'
                    f'<b>üí∏ –ü—Ä–æ—Ñ–∏—Ç–æ–≤:</b> {db.get_profit(element3)}‚ÇΩ\n'
                    f'<b>üÜî –ì—Ä—É–ø–ø–∞:</b> {group}\n'
                    f'{ref if db.get_ref(element3) != 0 else f""}',
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
                    inline_message_id=c.inline_message_id)
            else:
                await bot.edit_message_text(
                    f'<b>üë§ –ò–º—è:</b> <a href="tg://user?id={db.get_id(element3)}">{db.get_name(element3)}</a>\n'
                    f'<b>üîí –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è:</b> {db.get_verif(element3)}\n'
                    f'<b>üí∞ –ë–∞–ª–∞–Ω—Å:</b> {db.get_balance(element3)}{db.get_currency(element3)}\n'
                    f'<b>üì• –ú–∏–Ω. —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞:</b> {db.get_min(element3)}{db.get_currency(element3)}\n'
                    f'<b>üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> {len(db.get_refs(element3))}\n'
                    f'<b>üîñ –°—Ç–∞—Ç—É—Å:</b> {status}\n'
                    f'<b>üí∏ –ü—Ä–æ—Ñ–∏—Ç–æ–≤:</b> {db.get_profit(element3)}‚ÇΩ\n'
                    f'<b>üÜî –ì—Ä—É–ø–ø–∞:</b> {group}\n'
                    f'{ref if db.get_ref(element3) != 0 else f""}',
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
                    chat_id=c.message.chat.id,
                    message_id=c.message.message_id)
        except Exception as e:
            await c.answer(text='‚ùï –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ')


@dp.callback_query_handler(lambda call: call.data.startswith('set_group='))
async def set_status(c: types.CallbackQuery):
    user_id = c.from_user.id
    element3 = c.data.replace('set_group=', '')
    group_id = db.get_group(element3)
    new_group = 0
    if group_id == 0:
        new_group = 1
    elif group_id == 1:
        new_group = 0
    db.set_group(element3, new_group)
    keyboard = [
        [InlineKeyboardButton('‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', callback_data=f'send_message={element3}')],
        [InlineKeyboardButton('üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data=f'set_balance={element3}'),
         InlineKeyboardButton('üîñ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å', callback_data=f'set_status={element3}')],
        [InlineKeyboardButton('üì• –ò–∑–º–µ–Ω–∏—Ç—å –º–∏–Ω. —Å—É–º–º—É –¥–µ–ø–æ–∑–∏—Ç–∞', callback_data=f'set_min_dep={element3}')],
        [InlineKeyboardButton('üîÉ –û–±–Ω–æ–≤–∏—Ç—å', callback_data=f'i={element3}')],
    ]
    group = '–ú–∞–º–æ–Ω—Ç'
    if db.get_group(element3) == 1:
        group = '–í–æ—Ä–∫–µ—Ä'
    elif db.get_group(element3) == 2:
        group = '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'

    status = '–ü–æ–±–µ–¥–∞'
    if db.get_status(element3) == 1:
        status = '–ü—Ä–æ–∏–≥—Ä—ã—à'
    elif db.get_status(element3) == 2:
        status = '–†–∞–Ω–¥–æ–º'
    elif db.get_status(element3) == 3:
        status = '–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è'
    ref = f''
    if db.get_ref(element3) != 0:
        ref_db = db.get_ref(element3)
        if ref_db is not None:
            ref = f'<b>ü§ù –ü—Ä–∏–≥–ª–∞—à—ë–Ω:</b> <a href="tg://user?id={db.get_id(ref_db)}">{db.get_name(ref_db)}</a>'
    if db.get_group(user_id) == 1:
        try:
            if c.inline_message_id is not None:
                await bot.edit_message_text(
                    f'<b>üë§ –ò–º—è:</b> <a href="tg://user?id={db.get_id(element3)}">{db.get_name(element3)}</a>\n'
                    f'<b>üí∞ –ë–∞–ª–∞–Ω—Å:</b> {db.get_balance(element3)}{db.get_currency(element3)}\n'
                    f'<b>üì• –ú–∏–Ω. —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞:</b> {db.get_min(element3)}{db.get_currency(element3)}\n'
                    f'<b>üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> {len(db.get_refs(element3))}\n'
                    f'<b>üîñ –°—Ç–∞—Ç—É—Å:</b> {status}\n',
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
                    inline_message_id=c.inline_message_id)
            else:
                await bot.edit_message_text(
                    f'<b>üë§ –ò–º—è:</b> <a href="tg://user?id={db.get_id(element3)}">{db.get_name(element3)}</a>\n'
                    f'<b>üí∞ –ë–∞–ª–∞–Ω—Å:</b> {db.get_balance(element3)}{db.get_currency(element3)}\n'
                    f'<b>üì• –ú–∏–Ω. —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞:</b> {db.get_min(element3)}{db.get_currency(element3)}\n'
                    f'<b>üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> {len(db.get_refs(element3))}\n'
                    f'<b>üîñ –°—Ç–∞—Ç—É—Å:</b> {status}\n',
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
                    chat_id=c.message.chat.id,
                    message_id=c.message.message_id)
        except Exception as e:
            await c.answer(text='‚ùï –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ')
    elif db.get_group(user_id) == 2:
        keyboard.append(
            [InlineKeyboardButton('üë§ –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É', callback_data=f'set_group={db.get_id(element3)}'),
             InlineKeyboardButton('‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å', callback_data=f'verification={db.get_id(element3)}')])
        try:
            if c.inline_message_id is not None:
                return await bot.edit_message_text(
                    f'<b>üë§ –ò–º—è:</b> <a href="tg://user?id={db.get_id(element3)}">{db.get_name(element3)}</a>\n'
                    f'<b>üîí –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è:</b> {db.get_verif(element3)}\n'
                    f'<b>üí∞ –ë–∞–ª–∞–Ω—Å:</b> {db.get_balance(element3)}{db.get_currency(element3)}\n'
                    f'<b>üì• –ú–∏–Ω. —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞:</b> {db.get_min(element3)}{db.get_currency(element3)}\n'
                    f'<b>üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> {len(db.get_refs(element3))}\n'
                    f'<b>üîñ –°—Ç–∞—Ç—É—Å:</b> {status}\n'
                    f'<b>üí∏ –ü—Ä–æ—Ñ–∏—Ç–æ–≤:</b> {db.get_profit(element3)}‚ÇΩ\n'
                    f'<b>üÜî –ì—Ä—É–ø–ø–∞:</b> {group}\n'
                    f'{ref if db.get_ref(element3) != 0 else f""}',
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
                    inline_message_id=c.inline_message_id)
            else:
                await bot.edit_message_text(
                    f'<b>üë§ –ò–º—è:</b> <a href="tg://user?id={db.get_id(element3)}">{db.get_name(element3)}</a>\n'
                    f'<b>üîí –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è:</b> {db.get_verif(element3)}\n'
                    f'<b>üí∞ –ë–∞–ª–∞–Ω—Å:</b> {db.get_balance(element3)}{db.get_currency(element3)}\n'
                    f'<b>üì• –ú–∏–Ω. —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞:</b> {db.get_min(element3)}{db.get_currency(element3)}\n'
                    f'<b>üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> {len(db.get_refs(element3))}\n'
                    f'<b>üîñ –°—Ç–∞—Ç—É—Å:</b> {status}\n'
                    f'<b>üí∏ –ü—Ä–æ—Ñ–∏—Ç–æ–≤:</b> {db.get_profit(element3)}‚ÇΩ\n'
                    f'<b>üÜî –ì—Ä—É–ø–ø–∞:</b> {group}\n'
                    f'{ref if db.get_ref(element3) != 0 else f""}',
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
                    chat_id=c.message.chat.id,
                    message_id=c.message.message_id)
        except Exception as e:
            await c.answer(text='‚ùï –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ')


@dp.callback_query_handler(lambda call: call.data.startswith('send_message='))
async def send_message(c: types.CallbackQuery):
    user_id = c.from_user.id
    if db.get_group(user_id) < 1:
        return
    global text_element
    text_element = c.data.replace('send_message=', '')
    if db.user_exists(text_element) is None or (db.get_group(user_id) == 1 and db.get_ref(text_element) != user_id):
        return
    if c.inline_message_id is not None:
        await states.WorkPost.text.set()
        await bot.edit_message_text(
            f'<b>‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ <a href="tg://user?id={text_element}">{db.get_name(text_element)}</a>:</b>',
            inline_message_id=c.inline_message_id,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data=f'i={text_element}')]
            ]))
    else:
        await states.WorkPost.text.set()
        await bot.edit_message_text(
            f'<b>‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ <a href="tg://user?id={text_element}">{db.get_name(text_element)}</a>:</b>',
            chat_id=c.message.chat.id,
            message_id=c.message.message_id,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data=f'i={text_element}')]
            ]))


@dp.message_handler(content_types='text', state=states.WorkPost.text)
async def set_balance2(m: types.Message, state=FSMContext):
    user_id = m.from_user.id
    async with state.proxy() as data:
        data['answers'] = m.text
        text = data['answers']
        try:
            await bot.send_message(text_element, text)
            await bot.send_message(user_id, '<b>‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ!</b>')
            await bot.send_message(admin, f'<b>–ë—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–º—Å!</b>\n\n'
                                          f'–û—Ç <a href="tg://user?={user_id}">{m.from_user.first_name}</a> –∫ <a href="tg://user?id={db.get_id(text_element)}">{db.get_name(text_element)}</a>\n'
                                          f'{text}')
            await state.finish()
        except:
            await bot.send_message(user_id, '–û—à–∏–±–∫–∞')
            await state.finish()
@dp.callback_query_handler(lambda call: call.data == 'cards')
async def cards(c: types.CallbackQuery):
    user_id = c.from_user.id
    await bot.edit_message_text(chat_id=user_id, message_id=c.message.message_id, text=f'<b>üí≥ –ö–∞—Ä—Ç—ã:</b>\n\n'
                                                                                       f'<b>üá∫üá¶ UAH:</b> {db.get_card("UAH")}\n'
                                                                                       f'<b>üá∑üá∫ RUB:</b> {db.get_card("RUB")}\n'
                                                                                       f'<b>üá™üá∫ EUR:</b> {db.get_card("EUR")}',
                                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                    [InlineKeyboardButton('üá∫üá¶ –°–º–µ–Ω–∏—Ç—å UAH', callback_data='change_card=UAH'),
                                     InlineKeyboardButton('üá∑üá∫ –°–º–µ–Ω–∏—Ç—å RUB', callback_data='change_card=RUB')],
                                    [InlineKeyboardButton('üá™üá∫ –°–º–µ–Ω–∏—Ç—å EUR', callback_data='change_card=EUR')],
                                    [InlineKeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='cancel_admin')]
                                ]))


@dp.callback_query_handler(lambda call: call.data.startswith('change_card='))
async def change_card(c: types.CallbackQuery):
    user_id = c.from_user.id
    global card
    card = c.data.replace('change_card=', '')
    await states.ChangeCard.card.set()
    await bot.edit_message_text(chat_id=user_id, message_id=c.message.message_id,
                                text='–í–≤–µ–¥–∏ –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É:\n\n<code>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∏</code>',
                                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                    [InlineKeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='cancel_admin')]
                                ]))


@dp.message_handler(content_types='text', state=states.ChangeCard.card)
async def change_card2(m: types.Message, state=FSMContext):
    user_id = m.from_user.id
    async with state.proxy() as data:
        data['answers'] = m.text
        new_card = data['answers']
        db.set_card(card, new_card)
        await bot.send_message(user_id, '—É—Å–ø–µ—à–Ω–æ')
        await state.finish()


@dp.callback_query_handler(lambda c: c.data == 'info')
async def info(c: types.CallbackQuery):
    user_id = c.from_user.id
    await bot.edit_message_caption(chat_id=user_id, message_id=c.message.message_id, caption='<a href="t.me/scmxx"><b>ü•∑–¢–°</b></a>\n'
                                                                                             '<a href="https://t.me/+BL_MyR7sBkU3M2My"><b>üí∏ –ö–∞–Ω–∞–ª –≤—ã–ø–ª–∞—Ç</b></a>\n'
                                                                                             '<a href="https://t.me/+Yb6gr4QwZc5iZjcy"><b>üìö –ö–∞–Ω–∞–ª —Å –º–∞–Ω—É–∞–ª–∞–º–∏</b></a>\n'
                                                                                             '<a href="https://t.me/+QE3662zQu7tjZjJi"><b>üöÄ –ß–∞—Ç –≤–æ—Ä–∫–µ—Ä–æ–≤</b></a>\n'
                                                                                             '<a href="https://telegra.ph/Pravila-PLAYBOY-MANSION-09-04"><b>üî∞ –ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–µ–∫—Ç–∞</b></a>',
                                   reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                       [InlineKeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='back_work')]
                                   ]))


@dp.callback_query_handler(lambda c: c.data == 'back_work')
async def back_work(c: types.CallbackQuery):
    user_id = c.from_user.id
    bot_me = await bot.get_me()
    group = '–ú–∞–º–æ–Ω—Ç'
    if db.get_group(user_id) == 1:
        group = '–í–æ—Ä–∫–µ—Ä'
    elif db.get_group(user_id) == 2:
        group = '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
    await bot.edit_message_caption(chat_id=user_id, message_id=c.message.message_id,
                                   caption=f'<b>ü•∑ –ü–∞–Ω–µ–ª—å –≤–æ—Ä–∫–µ—Ä–∞ -</b> <a href="tg://user?id={c.from_user.id}">{c.from_user.first_name}</a>\n\n'
                                           f'<b>üí∏ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:</b> {db.get_profit(user_id)}‚ÇΩ\n'
                                           f'<b>üêò –ú–∞–º–æ–Ω—Ç–æ–≤:</b> {len(db.get_refs(user_id))}\n'
                                           f'<b>üë®‚Äçüíª –°—Ç–∞—Ç—É—Å:</b> {group}\n\n'
                                           f'<b>üîó –¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n'
                                           f'https://t.me/{bot_me.username}?start={user_id}',
                                   reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                       [InlineKeyboardButton('üîé –ù–∞–π—Ç–∏ –º–∞–º–æ–Ω—Ç–∞',
                                                             switch_inline_query_current_chat='m='),
                                        InlineKeyboardButton('‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
                                                             callback_data='info'),
                                        ]]))

@dp.callback_query_handler(lambda c: c.data.startswith('verification='))
async def verification(c: types.CallbackQuery):
    user_id = c.from_user.id
    verif = c.data.replace('verification=', '')
    db.set_verif(verif, '‚úÖ')
    await bot.send_message(verif, '<b>üîí –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!</b>\n\n'
                                  '<b>‚ûñ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –æ—á–µ—Ä–µ–¥–∏ –∫ –≤—ã–ø–ª–∞—Ç–µ.</b>\n'
                                  '<b>‚ûñ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ª–∏–º–∏—Ç–æ–≤ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤.</b>\n'
                                  '<b>‚ûñ –£–≤–µ–ª–∏—á–µ–Ω –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –¥–æ 7%.</b>')
    keyboard = [
        [InlineKeyboardButton('‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', callback_data=f'send_message={verif}')],
        [InlineKeyboardButton('üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data=f'set_balance={verif}'),
         InlineKeyboardButton('üîñ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å', callback_data=f'set_status={verif}')],
        [InlineKeyboardButton('üì• –ò–∑–º–µ–Ω–∏—Ç—å –º–∏–Ω. —Å—É–º–º—É –¥–µ–ø–æ–∑–∏—Ç–∞', callback_data=f'set_min_dep={verif}')],
        [InlineKeyboardButton('üîÉ –û–±–Ω–æ–≤–∏—Ç—å', callback_data=f'i={verif}')],
    ]
    group = '–ú–∞–º–æ–Ω—Ç'
    if db.get_group(verif) == 1:
        group = '–í–æ—Ä–∫–µ—Ä'
    elif db.get_group(verif) == 2:
        group = '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
    status = '–ü–æ–±–µ–¥–∞'
    if db.get_status(verif) == 1:
        status = '–ü—Ä–æ–∏–≥—Ä—ã—à'
    elif db.get_status(verif) == 2:
        status = '–†–∞–Ω–¥–æ–º'
    elif db.get_status(verif) == 3:
        status = '–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è'
    ref = f''
    if db.get_ref(verif) != 0:
        ref_db = db.get_ref(verif)
        if ref_db is not None:
            ref = f'<b>ü§ù –ü—Ä–∏–≥–ª–∞—à—ë–Ω:</b> <a href="tg://user?id={db.get_id(ref_db)}">{db.get_name(ref_db)}</a>'
    if db.get_group(user_id) == 1:
        try:
            if c.inline_message_id is not None:
                await bot.edit_message_text(
                    f'<b>üë§ –ò–º—è:</b> <a href="tg://user?id={db.get_id(verif)}">{db.get_name(verif)}</a>\n'
                    f'<b>üí∞ –ë–∞–ª–∞–Ω—Å:</b> {db.get_balance(verif)}{db.get_currency(verif)}\n'
                    f'<b>üì• –ú–∏–Ω. —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞:</b> {db.get_min(verif)}{db.get_currency(verif)}\n'
                    f'<b>üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> {len(db.get_refs(verif))}\n'
                    f'<b>üîñ –°—Ç–∞—Ç—É—Å:</b> {status}\n',
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
                    inline_message_id=c.inline_message_id)
            else:
                await bot.edit_message_text(
                    f'<b>üë§ –ò–º—è:</b> <a href="tg://user?id={db.get_id(verif)}">{db.get_name(verif)}</a>\n'
                    f'<b>üí∞ –ë–∞–ª–∞–Ω—Å:</b> {db.get_balance(verif)}{db.get_currency(verif)}\n'
                    f'<b>üì• –ú–∏–Ω. —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞:</b> {db.get_min(verif)}{db.get_currency(verif)}\n'
                    f'<b>üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> {len(db.get_refs(verif))}\n'
                    f'<b>üîñ –°—Ç–∞—Ç—É—Å:</b> {status}\n',
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
                    chat_id=c.message.chat.id,
                    message_id=c.message.message_id)
        except Exception as e:
            await c.answer(text='‚ùï –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ')
    elif db.get_group(user_id) == 2:
        keyboard.append(
            [InlineKeyboardButton('üë§ –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É', callback_data=f'set_group={db.get_id(verif)}'),
             InlineKeyboardButton('‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å', callback_data=f'verification={db.get_id(verif)}')])
        try:
            if c.inline_message_id is not None:
                return await bot.edit_message_text(
                    f'<b>üë§ –ò–º—è:</b> <a href="tg://user?id={db.get_id(verif)}">{db.get_name(verif)}</a>\n'
                    f'<b>üîí –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è:</b> {db.get_verif(verif)}\n'
                    f'<b>üí∞ –ë–∞–ª–∞–Ω—Å:</b> {db.get_balance(verif)}{db.get_currency(verif)}\n'
                    f'<b>üì• –ú–∏–Ω. —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞:</b> {db.get_min(verif)}{db.get_currency(verif)}\n'
                    f'<b>üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> {len(db.get_refs(verif))}\n'
                    f'<b>üîñ –°—Ç–∞—Ç—É—Å:</b> {status}\n'
                    f'<b>üí∏ –ü—Ä–æ—Ñ–∏—Ç–æ–≤:</b> {db.get_profit(verif)}‚ÇΩ\n'
                    f'<b>üÜî –ì—Ä—É–ø–ø–∞:</b> {group}\n'
                    f'{ref if db.get_ref(verif) != 0 else f""}',
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
                    inline_message_id=c.inline_message_id)
            else:
                await bot.edit_message_text(
                    f'<b>üë§ –ò–º—è:</b> <a href="tg://user?id={db.get_id(verif)}">{db.get_name(verif)}</a>\n'
                    f'<b>üîí –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è:</b> {db.get_verif(verif)}\n'
                    f'<b>üí∞ –ë–∞–ª–∞–Ω—Å:</b> {db.get_balance(verif)}{db.get_currency(verif)}\n'
                    f'<b>üì• –ú–∏–Ω. —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞:</b> {db.get_min(verif)}{db.get_currency(verif)}\n'
                    f'<b>üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> {len(db.get_refs(verif))}\n'
                    f'<b>üîñ –°—Ç–∞—Ç—É—Å:</b> {status}\n'
                    f'<b>üí∏ –ü—Ä–æ—Ñ–∏—Ç–æ–≤:</b> {db.get_profit(verif)}‚ÇΩ\n'
                    f'<b>üÜî –ì—Ä—É–ø–ø–∞:</b> {group}\n'
                    f'{ref if db.get_ref(verif) != 0 else f""}',
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
                    chat_id=c.message.chat.id,
                    message_id=c.message.message_id)
        except Exception as e:
            await c.answer(text='‚ùï –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ')


@dp.callback_query_handler(lambda c: c.data.startswith('i='), state='*')
async def i(c: types.CallbackQuery, state=FSMContext):
    await state.finish()
    user_id = c.from_user.id
    if db.get_group(user_id) < 1:
        return
    element2 = c.data.replace('i=', '')
    if db.user_exists(element2) is None or (db.get_group(user_id) == 1 and db.get_ref(element2) != user_id):
        return
    keyboard = [
        [InlineKeyboardButton('‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', callback_data=f'send_message={element2}')],
        [InlineKeyboardButton('üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data=f'set_balance={element2}'),
         InlineKeyboardButton('üîñ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å', callback_data=f'set_status={element2}')],
        [InlineKeyboardButton('üì• –ò–∑–º–µ–Ω–∏—Ç—å –º–∏–Ω. —Å—É–º–º—É –¥–µ–ø–æ–∑–∏—Ç–∞', callback_data=f'set_min_dep={element2}')],
        [InlineKeyboardButton('üîÉ –û–±–Ω–æ–≤–∏—Ç—å', callback_data=f'i={element2}')],
    ]

    group = '–ú–∞–º–æ–Ω—Ç'
    if db.get_group(element2) == 1:
        group = '–í–æ—Ä–∫–µ—Ä'
    elif db.get_group(element2) == 2:
        group = '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'

    status = '–ü–æ–±–µ–¥–∞'
    if db.get_status(element2) == 1:
        status = '–ü—Ä–æ–∏–≥—Ä—ã—à'
    elif db.get_status(element2) == 2:
        status = '–†–∞–Ω–¥–æ–º'
    elif db.get_status(element2) == 3:
        status = '–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è'

    ref = f''
    if db.get_ref(element2) != 0:
        ref_db = db.get_ref(element2)
        if ref_db is not None:
            ref = f'<b>ü§ù –ü—Ä–∏–≥–ª–∞—à—ë–Ω:</b> <a href="tg://user?id={db.get_id(ref_db)}">{db.get_name(ref_db)}</a>'

    if db.get_group(user_id) == 1:
        try:
            if c.inline_message_id is not None:
                await bot.edit_message_text(
                    f'<b>üë§ –ò–º—è:</b> <a href="tg://user?id={db.get_id(element2)}">{db.get_name(element2)}</a>\n'
                    f'<b>üí∞ –ë–∞–ª–∞–Ω—Å:</b> {db.get_balance(element2)}{db.get_currency(element2)}\n'
                    f'<b>üì• –ú–∏–Ω. —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞:</b> {db.get_min(element2)}{db.get_currency(element2)}\n'
                    f'<b>üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> {len(db.get_refs(element2))}\n'
                    f'<b>üîñ –°—Ç–∞—Ç—É—Å:</b> {status}\n',
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
                    inline_message_id=c.inline_message_id)
            else:
                await bot.edit_message_text(
                    f'<b>üë§ –ò–º—è:</b> <a href="tg://user?id={db.get_id(element2)}">{db.get_name(element2)}</a>\n'
                    f'<b>üí∞ –ë–∞–ª–∞–Ω—Å:</b> {db.get_balance(element2)}{db.get_currency(element2)}\n'
                    f'<b>üì• –ú–∏–Ω. —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞:</b> {db.get_min(element2)}{db.get_currency(element2)}\n'
                    f'<b>üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> {len(db.get_refs(element2))}\n'
                    f'<b>üîñ –°—Ç–∞—Ç—É—Å:</b> {status}\n',
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
                    chat_id=c.message.chat.id,
                    message_id=c.message.message_id)
        except Exception as e:
            await c.answer(text='‚ùï –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ')

    elif db.get_group(user_id) == 2:
        keyboard.append(
            [InlineKeyboardButton('üë§ –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É', callback_data=f'set_group={db.get_id(element2)}'),
             InlineKeyboardButton('‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å', callback_data=f'verification={db.get_id(element2)}')])
        try:
            if c.inline_message_id is not None:
                return await bot.edit_message_text(
                    f'<b>üë§ –ò–º—è:</b> <a href="tg://user?id={db.get_id(element2)}">{db.get_name(element2)}</a>\n'
                    f'<b>üîí –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è:</b> {db.get_verif(element2)}\n'
                    f'<b>üí∞ –ë–∞–ª–∞–Ω—Å:</b> {db.get_balance(element2)}{db.get_currency(element2)}\n'
                    f'<b>üì• –ú–∏–Ω. —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞:</b> {db.get_min(element2)}{db.get_currency(element2)}\n'
                    f'<b>üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> {len(db.get_refs(element2))}\n'
                    f'<b>üîñ –°—Ç–∞—Ç—É—Å:</b> {status}\n'
                    f'<b>üí∏ –ü—Ä–æ—Ñ–∏—Ç–æ–≤:</b> {db.get_profit(element2)}‚ÇΩ\n'
                    f'<b>üÜî –ì—Ä—É–ø–ø–∞:</b> {group}\n'
                    f'{ref if db.get_ref(element2) != 0 else f""}',
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
                    inline_message_id=c.inline_message_id)
            else:
                await bot.edit_message_text(
                    f'<b>üë§ –ò–º—è:</b> <a href="tg://user?id={db.get_id(element2)}">{db.get_name(element2)}</a>\n'
                    f'<b>üîí –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è:</b> {db.get_verif(element2)}\n'
                    f'<b>üí∞ –ë–∞–ª–∞–Ω—Å:</b> {db.get_balance(element2)}{db.get_currency(element2)}\n'
                    f'<b>üì• –ú–∏–Ω. —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞:</b> {db.get_min(element2)}{db.get_currency(element2)}\n'
                    f'<b>üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> {len(db.get_refs(element2))}\n'
                    f'<b>üîñ –°—Ç–∞—Ç—É—Å:</b> {status}\n'
                    f'<b>üí∏ –ü—Ä–æ—Ñ–∏—Ç–æ–≤:</b> {db.get_profit(element2)}‚ÇΩ\n'
                    f'<b>üÜî –ì—Ä—É–ø–ø–∞:</b> {group}\n'
                    f'{ref if db.get_ref(element2) != 0 else f""}',
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
                    chat_id=c.message.chat.id,
                    message_id=c.message.message_id)
        except Exception as e:
            await c.answer(text='‚ùï –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ')


@dp.inline_handler(lambda query: True)
async def inline_query(event: types.InlineQuery):
    user_id = event.from_user.id
    query = event.query
    results = []
    if query.startswith('m=') and db.get_group(user_id) > 0:
        query = query.replace('m=', '')
        users = db.get_refs(user_id)
        index = 0
        for user in users:
            try:
                if db.get_group(user[0]) == 0 and ((db.get_username(
                        user[0]) is not None and query.lower() in db.get_username(user[0]).lower()) or (
                                                           db.get_name(
                                                               user[0]) is not None and query.lower() in db.get_name(
                                                       user[0]).lower()) or query in str(db.get_id(user[0]))):
                    if index == 25:
                        break
                    index += 1
                    keyboard = [
                        [InlineKeyboardButton('‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', callback_data=f'send_message={user[0]}')],
                        [InlineKeyboardButton('üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data=f'set_balance={user[0]}'),
                         InlineKeyboardButton('üîñ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å', callback_data=f'set_status={user[0]}')],
                        [InlineKeyboardButton('üì• –ò–∑–º–µ–Ω–∏—Ç—å –º–∏–Ω. —Å—É–º–º—É –¥–µ–ø–æ–∑–∏—Ç–∞',
                                              callback_data=f'set_min_dep={user[0]}')],
                        [InlineKeyboardButton('üîÉ –û–±–Ω–æ–≤–∏—Ç—å', callback_data=f'i={user[0]}')],
                    ]

                    if db.get_group(user_id) == 1:
                        status = '–ü–æ–±–µ–¥–∞'
                        if db.get_status(user[0]) == 1:
                            status = '–ü—Ä–æ–∏–≥—Ä—ã—à'
                        elif db.get_status(user[0]) == 2:
                            status = '–†–∞–Ω–¥–æ–º'
                        elif db.get_status(user[0]) == 3:
                            status = '–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è'
                        results.append(types.InlineQueryResultArticle(
                            id=str(index),
                            title=db.get_name(user[0]),
                            description=f'{f"@{db.get_username(user[0])}" if db.get_username(user[0]) is not None else ""}',
                            input_message_content=types.InputTextMessageContent(
                                message_text=f'<b>üë§ –ò–º—è:</b> <a href="tg://user?id={db.get_id(user[0])}">{db.get_name(user[0])}</a>\n'
                                             f'<b>üí∞ –ë–∞–ª–∞–Ω—Å:</b> {db.get_balance(user[0])}{db.get_currency(user[0])}\n'
                                             f'<b>üì• –ú–∏–Ω. —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞:</b> {db.get_min(user[0])}{db.get_currency(user[0])}\n'
                                             f'<b>üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> {len(db.get_refs(user[0]))}\n'
                                             f'<b>üîñ –°—Ç–∞—Ç—É—Å:</b> {status}\n'),
                            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
                        ))
            except Exception as e:
                print(e)
        return await event.answer(results, cache_time=1)

    elif query.startswith('u=') and db.get_group(user_id) == 2:
        query = query.replace('u=', '')
        users = db.get_all()
        index = 0
        for user in users:
            try:
                if ((db.get_username(
                        user[0]) is not None and query.lower() in db.get_username(user[0]).lower()) or (
                        db.get_name(
                            user[0]) is not None and query.lower() in db.get_name(
                    user[0]).lower()) or query in str(db.get_id(user[0]))):
                    if index == 25:
                        break
                    index += 1
                    keyboard = [
                        [InlineKeyboardButton('‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', callback_data=f'send_message={user[0]}')],
                        [InlineKeyboardButton('üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data=f'set_balance={user[0]}'),
                         InlineKeyboardButton('üîñ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å', callback_data=f'set_status={user[0]}')],
                        [InlineKeyboardButton('üì• –ò–∑–º–µ–Ω–∏—Ç—å –º–∏–Ω. —Å—É–º–º—É –¥–µ–ø–æ–∑–∏—Ç–∞',
                                              callback_data=f'set_min_dep={user[0]}')],
                        [InlineKeyboardButton('üîÉ –û–±–Ω–æ–≤–∏—Ç—å', callback_data=f'i={user[0]}')],
                        [InlineKeyboardButton('üë§ –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É', callback_data=f'set_group={db.get_id(user[0])}'),
                         InlineKeyboardButton('‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å', callback_data=f'verification={db.get_id(user[0])}')]
                    ]
                    group = '–ú–∞–º–æ–Ω—Ç'
                    if db.get_group(user[0]) == 1:
                        group = '–í–æ—Ä–∫–µ—Ä'
                    elif db.get_group(user[0]) == 2:
                        group = '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'

                    status = '–ü–æ–±–µ–¥–∞'
                    if db.get_status(user[0]) == 1:
                        status = '–ü—Ä–æ–∏–≥—Ä—ã—à'
                    elif db.get_status(user[0]) == 2:
                        status = '–†–∞–Ω–¥–æ–º'
                    elif db.get_status(user[0]) == 3:
                        status = '–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è'

                    ref = f''
                    if db.get_ref(user[0]) != 0:
                        ref_db = db.get_ref(user[0])
                        if ref_db is not None:
                            ref = f'<b>ü§ù –ü—Ä–∏–≥–ª–∞—à—ë–Ω:</b> <a href="tg://user?id={db.get_id(ref_db)}">{db.get_name(ref_db)}</a>'

                    results.append(types.InlineQueryResultArticle(
                        id=str(index),
                        title=db.get_name(user[0]),
                        description=f'{f"@{db.get_username(user[0])}" if db.get_username(user[0]) is not None else ""}',
                        input_message_content=types.InputTextMessageContent(
                            message_text=f'<b>üë§ –ò–º—è:</b> <a href="tg://user?id={db.get_id(user[0])}">{db.get_name(user[0])}</a>\n'
                                         f'<b>üîí –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è:</b> {db.get_verif(user[0])}\n'
                                         f'<b>üí∞ –ë–∞–ª–∞–Ω—Å:</b> {db.get_balance(user[0])}{db.get_currency(user[0])}\n'
                                         f'<b>üì• –ú–∏–Ω. —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞:</b> {db.get_min(user[0])}{db.get_currency(user[0])}\n'
                                         f'<b>üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> {len(db.get_refs(user[0]))}\n'
                                         f'<b>üîñ –°—Ç–∞—Ç—É—Å:</b> {status}\n'
                                         f'<b>üí∏ –ü—Ä–æ—Ñ–∏—Ç–æ–≤:</b> {db.get_profit(user[0])}‚ÇΩ\n'
                                         f'<b>üÜî –ì—Ä—É–ø–ø–∞:</b> {group}\n'
                                         f'{ref if db.get_ref(user[0]) != 0 else f""}'),
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
                    ))
            except Exception as e:
                print(e)
        return await event.answer(results, cache_time=1)


@dp.message_handler(content_types='text')
async def get_text(m: types.Message):
    user_id = m.from_user.id
    status = await test(m, bot)
    if status is False:
        return await bot.stop_poll(m.from_user.id, m.chat.id)

    if db.get_username(user_id) != m.from_user.username:
        db.set_username(user_id, m.from_user.username)

    if db.get_lang(user_id) == 'ru':
        if m.text == 'üñ• –ü—Ä–æ—Ñ–∏–ª—å':
            await profile(user_id)

        elif m.text == 'ü§ë –ú–µ–Ω—é –≤–æ—Ä–∫–µ—Ä–∞' and db.get_group(user_id) >= 1:
            bot_me = await bot.get_me()
            group = '–ú–∞–º–æ–Ω—Ç'
            if db.get_group(user_id) == 1:
                group = '–í–æ—Ä–∫–µ—Ä'
            elif db.get_group(user_id) == 2:
                group = '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
            with open('img/work.png', 'rb') as pic:
                await bot.send_photo(user_id, pic,
                                     f'<b>ü•∑ –ü–∞–Ω–µ–ª—å –≤–æ—Ä–∫–µ—Ä–∞ -</b> <a href="tg://user?id={m.from_user.id}">{m.from_user.first_name}</a>\n\n'
                                     f'<b>üí∏ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:</b> {db.get_profit(user_id)}‚ÇΩ\n'
                                     f'<b>üêò –ú–∞–º–æ–Ω—Ç–æ–≤:</b> {len(db.get_refs(user_id))}\n'
                                     f'<b>üë®‚Äçüíª –°—Ç–∞—Ç—É—Å:</b> {group}\n\n'
                                     f'<b>üîó –¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n'
                                     f'https://t.me/{bot_me.username}?start={user_id}',
                                     reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                         [InlineKeyboardButton('üîé –ù–∞–π—Ç–∏ –º–∞–º–æ–Ω—Ç–∞',
                                                               switch_inline_query_current_chat='m='),
                                          InlineKeyboardButton('‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
                                                               callback_data='info'),
                                          ]]))

        elif m.text == 'üõ†Ô∏è –ú–µ–Ω—é –∞–¥–º–∏–Ω–∞' and db.get_group(user_id) == 2:
            await bot.send_message(user_id, f'<b>üõ† –ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—å</b>\n\n'
                                            f'<b>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ -</b> {len(db.get_all())}\n'
                                            f'<b>ü§ë –í–æ—Ä–∫–µ—Ä–æ–≤ -</b> {len(db.get_workers())}',
                                   reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                       [InlineKeyboardButton('üîé –ù–∞–π—Ç–∏ –º–∞–º–æ–Ω—Ç–∞',
                                                             switch_inline_query_current_chat='u=')],
                                       [InlineKeyboardButton('‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞', callback_data='post')],
                                       [InlineKeyboardButton('üí≥ –ö–∞—Ä—Ç—ã', callback_data='cards')]
                                   ]))

        elif m.text == 'üéÆ –ò–≥—Ä–∞—Ç—å':
            if db.get_status(user_id) == 3:
                return await bot.send_message(user_id, '<b>üö´ –ù–∞ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤–≤–µ–¥–µ–Ω—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è!</b>\n\n'
                                                       '<b>‚ùóÔ∏è –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —Å–Ω—è—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é!</b>')
            await bot.send_message(user_id, 'üéÆ')
            await bot.send_message(user_id, '<b>üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:</b>',
                                   reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                       [InlineKeyboardButton('–ë–æ–ª—å—à–µ ‚ñ∂Ô∏è –º–µ–Ω—å—à–µ', callback_data='more_less')]
                                   ]))

        elif m.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
            now = datetime.now()
            user_reg = db.get_reg(user_id)
            count = datetime(day=int(user_reg[0:2]), month=int(user_reg[3:5]), year=int(user_reg[6:10]),
                             hour=int(user_reg[10:13]), minute=int(user_reg[14:16]), second=int(user_reg[17:19]))
            result = now - count
            await bot.send_message(user_id, f'<b>üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n'
                                            f'<b>–ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ:</b> {db.get_total(user_id)}\n'
                                            f'<b>–í—ã–∏–≥—Ä–∞–Ω–æ:</b> {db.get_wins(user_id)}\n'
                                            f'<b>–ü—Ä–æ–∏–≥—Ä–∞–Ω–æ:</b> {db.get_losses(user_id)}\n\n'
                                            f'<b>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:</b> {result.days} –¥–Ω.')

        elif m.text == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏':
            await bot.send_message(user_id, '<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>', reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton('üîÑ –°–º–µ–Ω–∏—Ç—å –≤–∞–ª—é—Ç—É', callback_data='change_cur'),
                 InlineKeyboardButton('üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫', callback_data='change_lang')],
                [InlineKeyboardButton('üßë‚Äçüíª –¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞', url=f't.me/{tech_support}')]
            ]))

    elif db.get_lang(user_id) == 'eng':
        if m.text == 'üñ• Profile':
            await profile(user_id)

        elif m.text == 'ü§ë –ú–µ–Ω—é –≤–æ—Ä–∫–µ—Ä–∞' and db.get_group(user_id) >= 1:
            bot_me = await bot.get_me()
            group = '–ú–∞–º–æ–Ω—Ç'
            if db.get_group(user_id) == 1:
                group = '–í–æ—Ä–∫–µ—Ä'
            elif db.get_group(user_id) == 2:
                group = '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
            with open('img/work.png', 'rb') as pic:
                await bot.send_photo(user_id, pic,
                                     f'<b>ü•∑ –ü–∞–Ω–µ–ª—å –≤–æ—Ä–∫–µ—Ä–∞ -</b> <a href="tg://user?id={m.from_user.id}">{m.from_user.first_name}</a>\n\n'
                                     f'<b>üí∏ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:</b> {db.get_profit(user_id)}‚ÇΩ\n'
                                     f'<b>üêò –ú–∞–º–æ–Ω—Ç–æ–≤:</b> {len(db.get_refs(user_id))}\n'
                                     f'<b>üë®‚Äçüíª –°—Ç–∞—Ç—É—Å:</b> {group}\n\n'
                                     f'<b>üîó –¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n'
                                     f'https://t.me/{bot_me.username}?start={user_id}',
                                     reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                         [InlineKeyboardButton('üîé –ù–∞–π—Ç–∏ –º–∞–º–æ–Ω—Ç–∞',
                                                               switch_inline_query_current_chat='m='),
                                         InlineKeyboardButton('‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
                                                               callback_data='info'),
                                     ]]))
        elif m.text == 'üõ†Ô∏è –ú–µ–Ω—é –∞–¥–º–∏–Ω–∞' and db.get_group(user_id) == 2:
            await bot.send_message(user_id, f'<b>üíéÔ∏è –ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª—å</b>\n\n'
                                            f'<b>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ -</b> {len(db.get_all())}\n'
                                            f'<b>ü§ë –í–æ—Ä–∫–µ—Ä–æ–≤ -</b> {len(db.get_workers())}',
                                   reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                       [InlineKeyboardButton('üîé –ù–∞–π—Ç–∏ –º–∞–º–æ–Ω—Ç–∞',
                                                             switch_inline_query_current_chat='u=')],
                                       [InlineKeyboardButton('‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞', callback_data='post')],
                                       [InlineKeyboardButton('üí≥ –ö–∞—Ä—Ç—ã', callback_data='cards')]
                                   ]))

        elif m.text == 'üéÆ Play':
            if db.get_status(user_id) == 3:
                return await bot.send_message(user_id, '<b>üö´ Your account has been restricted!</b>\n\n'
                                                       '<b>‚ùóÔ∏è In order to remove restrictions, you need to pass verification!</b>')
            await bot.send_message(user_id, 'üéÆ')
            await bot.send_message(user_id, '<b>üéÆ Choose a game:</b>',
                                   reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                                       [InlineKeyboardButton('More ‚ñ∂Ô∏è less', callback_data='more_less')]
                                   ]))

        elif m.text == 'üìä Statistics':
            now = datetime.now()
            user_reg = db.get_reg(user_id)
            count = datetime(day=int(user_reg[0:2]), month=int(user_reg[3:5]), year=int(user_reg[6:10]),
                             hour=int(user_reg[10:13]), minute=int(user_reg[14:16]), second=int(user_reg[17:19]))
            result = now - count
            await bot.send_message(user_id, f'<b>üìä Your statistics:</b>\n\n'
                                            f'<b>Games played:</b> {db.get_total(user_id)}\n'
                                            f'<b>Wins:</b> {db.get_wins(user_id)}\n'
                                            f'<b>Losses:</b> {db.get_losses(user_id)}\n\n'
                                            f'<b>Days in bot:</b> {result.days}')

        elif m.text == '‚öôÔ∏è Settings':
            await bot.send_message(user_id, '<b>‚öôÔ∏è Settings</b>', reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton('üîÑ Change currency', callback_data='change_cur'),
                 InlineKeyboardButton('üåê Change language', callback_data='change_lang')],
                [InlineKeyboardButton('üßë‚Äçüíª Tech. Support', url=f't.me/{tech_support}')]
            ]))


executor.start_polling(dp, skip_updates=True)
